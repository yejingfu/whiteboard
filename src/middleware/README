Middleware
============================

The middleware is running as a backend server, providing basic services such as user management (login, logout, session management, etc.)

## 1 Get started

* **Play & Activator**

Make sure the JVM, Scala and Play framework are installed firstly.
We recommend to install JVM version 1.8.0, Scale version 2.11.4, and Play framework version 2.3.6.

To generate the project, run play command on the console window.

    $activator new middleware play-scala

Go to the new folder and run in play console.

    $cd middelware
    $activator
    [middleware] $ compile
    [middleware] $ run  # or ~run

If the appliction is launched, you would see the following message:

    [info] play - Listening for HTTP on /0:0:0:0:0:0:0:0:9000

Then you can access the webpage in local browser with the address: "http://localhost:9000"

* **Couchbase**

Install Couchbase from its offical [website](http://www.couchbase.com/). The latest version is 2.5. And I suggest to install on Ubuntu.

By default the couchbase is installed at "/opt/couchbase/" on Ubuntu. If it's installed successfully, it would be added to the demon process and running at port 8091. So you can access its admin page from "http://localhost:8091".

The Couchbase provide the command `couchbase-server` to controll its process. Also you can use system `service` to start, stop, reload the couchbase.

    $sudo service couchbase-server {start|stop|restart|status|force-reload}

Another useful command line utility the couchbase provides is `couchbase-cli` which provide rich functions to interact with couchbase server.

    $couchbase-cli COMMAND [BUCKET_NAME] CLUSTER [OPTIONS]

* **Work with IDEA**

You can import the play project into IDEA directly.

Or you can generate the idea project files by calling Play commands.

    [middleware] $ idea  ## or $ idea with-sources=yes

Then you use IntelliJ to open this project.

To debug Play with IDEA

    Go to the IDEA, Open Run/Debug Configurations dialog, then click Run -> Edit Configurations
    Add a Remote configuration, then select Remote
    Configure it: 
       Set a name
       Transport: Socket
       Debugger mode: Attach
       Host: localhost
       Port: 9999
       Select module you imported
    Close dialog - click Apply
    set breakpoint anywhere in IDEA
    Start play in debug mode from console:
    $play debug
    [your app]$run
    Finally, browse to http://localhost:9000. IntelliJ should stop at your breakpoint.

To run all tests(JUnit), please run in activator console

    [middleware] $ test

To run specific test by spec name, please enter play console and then call testOnly:

    $play
    [middleware] $ testOnly package.ApplicationSpec

The test page auto-generated by swagger:

    http://localhost:9000/api-docs.json           # basic information
    http://localhost:9000/api-docs.json/v1.0/user # JSON data about user APIs
    http://localhost:9000/assets/swagger/index.html  # the swagger generated documenatation

## 2 Couchbase

Please create the following views in couchbase.

    # by_email
    function (doc, meta) {
      if (doc.email) {
        emit(doc.email, doc.uid);
      }
    }
    
    # by_gid
    function (doc, meta) {
      if (meta.id[0] === 'g' && meta.id[1] === ':') {
        emit(doc.id, doc);
      }
    }
    
    # by_openid
    function (doc, meta) {
      if (doc.oidtoken) {
        emit(doc.oidtoken, doc);
      }
    }
    
    # by_uid
    function (doc, meta) {
      if (meta.id[0] === 'u' && meta.id[1] === ':') {
          emit(doc.id, doc);
      }
    }



## 3 troubleshooting

### 3.1 POST request body is empty

When use the Chrome `Postman` or Safari `RESTClient` to send POST request to play server, the request JSON body cannot send to server. We should set the "contentType" to "application/json". However, the Postman or RESTClient have no such the option.

Instead, in order to POST request, you can user `curl`:

    $curl --header "Content-type:application/json" --request POST --data '{"email":"user@company.com","password":"456", "screenName":"User", "terms":["home"]}' http://localhost:9000/v1.0/user/register

Or with Jquery AJAX:

    $.ajax({url:'/v1.0/user/register', type: 'POST', dataType: 'json', data: JSON.stringify(body), contentType:'application/json; charset=utf-8'})

This has been fixed by forcing convert plain text to json object at the server side if it's receiving the plain text.

## 4 List of HTTP status codes

* 1XX: Informational

* 2XX: Success

* 3XX: Redirection

* 4XX: Client Error

* 5XX: Server Error

For more details, see the page: [http://en.wikipedia.org/wiki/List_of_HTTP_status_codes](http://en.wikipedia.org/wiki/List_of_HTTP_status_codes).

## 5 Deployment

Now the application has been deployed to the alpha environment on [AWS](http://ec2-54-82-211-235.compute-1.amazonaws.com/)

Please call http://ec2-54-82-211-235.compute-1.amazonaws.com/assets/swagger/index.html to show the swagger based documentation.